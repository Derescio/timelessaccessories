generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  addresses     Address[]
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  Wishlist      Wishlist?
}

model Product {
  id                 String                  @id @default(cuid())
  name               String
  description        String
  price              Decimal                 @db.Decimal(10, 2)
  categoryId         String
  inventory          Int                     @default(0)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  compareAtPrice     Decimal?
  discountPercentage Int?                    @default(0)
  hasDiscount        Boolean                 @default(false)
  isActive           Boolean                 @default(true)
  metadata           Json?
  sku                String                  @unique
  slug               String                  @unique
  cartItems          CartItem[]
  orderItems         OrderItem[]
  category           Category                @relation(fields: [categoryId], references: [id])
  attributes         ProductAttributeValue[]
  images             ProductImage[]
  inventories        ProductInventory[]
  variants           ProductVariant[]
  reviews            Review[]
  wishlistItems      WishlistItem[]
}

model Category {
  id          String              @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  parentId    String?
  slug        String              @unique
  parent      Category?           @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[]          @relation("SubCategories")
  attributes  CategoryAttribute[]
  products    Product[]
}

model CategoryAttribute {
  id         String                  @id @default(cuid())
  name       String
  type       AttributeType
  required   Boolean                 @default(false)
  options    String[]
  categoryId String
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  category   Category                @relation(fields: [categoryId], references: [id])
  values     ProductAttributeValue[]

  @@unique([categoryId, name])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  total           Decimal
  addressId       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  billingAddress  Json?
  notes           String?
  paymentIntent   String?
  shipping        Decimal
  shippingAddress Json
  subtotal        Decimal
  tax             Decimal
  Address         Address?    @relation(fields: [addressId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  Payment         Payment?

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  variantId String?
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  sessionId String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  variantId String?
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, variantId])
  @@index([cartId])
  @@index([productId])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int      @default(5)
  userId     String
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  isVerified Boolean  @default(false)
  title      String?
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
}

model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]
}

model Payment {
  id        String        @id @default(cuid())
  orderId   String        @unique
  amount    Decimal       @db.Decimal(10, 2)
  status    PaymentStatus @default(PENDING)
  provider  String
  paymentId String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order         @relation(fields: [orderId], references: [id])
}

model ProductImage {
  id        String          @id @default(cuid())
  productId String
  url       String
  alt       String?
  position  Int             @default(0)
  variantId String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId])
}

model ProductAttributeValue {
  id          String            @id @default(cuid())
  productId   String
  attributeId String
  value       String
  variantId   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  attribute   CategoryAttribute @relation(fields: [attributeId], references: [id])
  product     Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant     ProductVariant?   @relation(fields: [variantId], references: [id])

  @@unique([productId, attributeId, variantId])
  @@index([productId])
}

model ProductVariant {
  id          String                  @id @default(cuid())
  productId   String
  sku         String                  @unique
  price       Decimal?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  attributes  ProductAttributeValue[]
  images      ProductImage[]
  inventories ProductInventory[]
  product     Product                 @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductInventory {
  id        String          @id @default(cuid())
  productId String
  variantId String?
  quantity  Int
  lowStock  Int             @default(5)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([productId, variantId])
  @@index([productId])
  @@index([variantId])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]

  @@index([userId])
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([wishlistId])
  @@index([productId])
}

enum AttributeType {
  SIZE
  COLOR
  MATERIAL
  STYLE
  WEIGHT
  LENGTH
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
