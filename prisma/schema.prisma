generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  addresses     Address[]
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  Wishlist      Wishlist?
}

model Product {
  id                 String                  @id @default(cuid())
  name               String
  slug               String                  @unique
  description        String
  price              Decimal                 @db.Decimal(10, 2)
  compareAtPrice     Decimal? // Original price for sale items
  hasDiscount        Boolean                 @default(false)
  discountPercentage Int?                    @default(0)
  sku                String                  @unique
  categoryId         String
  inventory          Int                     @default(0)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  cartItems          CartItem[]
  orderItems         OrderItem[]
  category           Category                @relation(fields: [categoryId], references: [id])
  reviews            Review[]
  images             ProductImage[]
  attributes         ProductAttributeValue[]
  variants           ProductVariant[]
  wishlistItems      WishlistItem[]
  isActive           Boolean                 @default(true)
  metadata           Json? // For additional flexible data
  ProductInventory   ProductInventory?
}

model Category {
  id          String              @id @default(cuid())
  name        String
  slug        String              @unique
  description String?
  parentId    String? // For subcategories (e.g., Necklaces under Jewelry)
  parent      Category?           @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[]          @relation("SubCategories")
  products    Product[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  attributes  CategoryAttribute[]
}

model CategoryAttribute {
  id         String                  @id @default(cuid())
  name       String // e.g., "Size", "Color", "Material"
  type       AttributeType
  required   Boolean                 @default(false)
  options    String[] // e.g., ["S", "M", "L"] or ["Gold", "Silver"]
  categoryId String
  category   Category                @relation(fields: [categoryId], references: [id])
  values     ProductAttributeValue[]
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt

  @@unique([categoryId, name])
}

enum AttributeType {
  SIZE
  COLOR
  MATERIAL
  STYLE
  WEIGHT
  LENGTH
  OTHER
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  subtotal        Decimal
  tax             Decimal
  shipping        Decimal
  total           Decimal
  shippingAddress Json
  billingAddress  Json?
  paymentIntent   String? // Stripe payment intent ID
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Address         Address?    @relation(fields: [addressId], references: [id])
  addressId       String?
  Payment         Payment?

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  variantId String?
  quantity  Int
  price     Decimal // Price at time of purchase
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  sessionId String?    @unique // For guest carts
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  variantId String?
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, variantId])
  @@index([cartId])
  @@index([productId])
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  rating     Int      @default(5)
  title      String?
  content    String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]
}

model Payment {
  id        String        @id @default(cuid())
  orderId   String        @unique
  amount    Decimal       @db.Decimal(10, 2)
  status    PaymentStatus @default(PENDING)
  provider  String
  paymentId String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order         @relation(fields: [orderId], references: [id])
}

model ProductImage {
  id        String          @id @default(cuid())
  productId String
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  alt       String?
  position  Int             @default(0)
  variantId String? // Optional: specific variant this image belongs to
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([productId])
}

model ProductAttributeValue {
  id          String            @id @default(cuid())
  productId   String
  product     Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeId String
  attribute   CategoryAttribute @relation(fields: [attributeId], references: [id])
  value       String
  variantId   String?
  variant     ProductVariant?   @relation(fields: [variantId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([productId, attributeId, variantId])
  @@index([productId])
}

model ProductVariant {
  id         String                  @id @default(cuid())
  productId  String
  product    Product                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku        String                  @unique
  price      Decimal? // Override main product price if needed
  attributes ProductAttributeValue[]
  images     ProductImage[]
  inventory  ProductInventory?
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt

  @@index([productId])
}

model ProductInventory {
  id        String          @id @default(cuid())
  productId String          @unique
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?         @unique
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  lowStock  Int             @default(5) // Low stock notification threshold
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([userId])
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
  @@index([wishlistId])
  @@index([productId])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
