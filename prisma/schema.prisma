generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role              @default(USER)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Account         Account[]
  addresses       Address[]
  cart            Cart?
  categories      Category[]
  designs         Design[]          @relation("UserDesigns")
  orders          Order[]
  productWishlist ProductWishlist[] @relation("ProductWishlist")
  promotionUsage  PromotionUsage[]
  reviews         Review[]
  Session         Session[]
  wishlist        Wishlist?
}

model Product {
  id                 String                  @id @default(cuid())
  name               String
  description        String
  slug               String                  @unique
  categoryId         String
  isActive           Boolean                 @default(true)
  metadata           Json?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  isFeatured         Boolean                 @default(false)
  productTypeId      String?
  numReviews         Int?
  rating             Float?
  fulfillmentType    FulfillmentType         @default(LOCAL_INVENTORY)
  printifyProductId  String?
  printifyShopId     Int?
  cartItems          CartItem[]
  orderItems         OrderItem[]
  category           Category                @relation(fields: [categoryId], references: [id])
  productType        ProductType?            @relation(fields: [productTypeId], references: [id])
  attributeValues    ProductAttributeValue[]
  productDesigns     ProductDesign[]         @relation("ProductDesigns")
  inventories        ProductInventory[]
  productWishlist    ProductWishlist[]       @relation("ProductWishlist")
  freeItemPromotions Promotion[]             @relation("FreeItemPromotion")
  reviews            Review[]
  WishlistItem       WishlistItem[]
  promotions         Promotion[]             @relation("ProductPromotions")

  @@index([categoryId])
  @@index([isActive])
}

model ProductInventory {
  id                 String                    @id @default(cuid())
  productId          String
  sku                String                    @unique
  costPrice          Decimal                   @db.Decimal(10, 2)
  retailPrice        Decimal                   @db.Decimal(10, 2)
  compareAtPrice     Decimal?                  @db.Decimal(10, 2)
  discountPercentage Int?
  hasDiscount        Boolean                   @default(false)
  quantity           Int                       @default(0)
  lowStock           Int                       @default(5)
  images             String[]
  attributes         Json?
  isDefault          Boolean                   @default(false)
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  reservedStock      Int                       @default(0)
  printifyVariantId  String?
  cartItems          CartItem[]
  attributeValues    InventoryAttributeValue[]
  orderItems         OrderItem[]
  product            Product                   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
}

model Category {
  id                   String       @id @default(cuid())
  name                 String
  description          String?
  imageUrl             String?      @default("/placeholder.svg")
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  parentId             String?
  slug                 String       @unique
  userId               String?
  defaultProductTypeId String?
  isActive             Boolean      @default(true)
  defaultProductType   ProductType? @relation(fields: [defaultProductTypeId], references: [id])
  parent               Category?    @relation("SubCategories", fields: [parentId], references: [id])
  children             Category[]   @relation("SubCategories")
  user                 User?        @relation(fields: [userId], references: [id])
  products             Product[]
  promotions           Promotion[]  @relation("CategoryPromotions")

  @@index([parentId])
  @@index([userId])
}

model Order {
  id                 String            @id @default(cuid())
  userId             String?
  status             OrderStatus       @default(PENDING)
  subtotal           Decimal           @db.Decimal(10, 2)
  tax                Decimal           @db.Decimal(10, 2)
  shipping           Decimal           @db.Decimal(10, 2)
  total              Decimal           @db.Decimal(10, 2)
  addressId          String?
  billingAddress     Json?
  shippingAddress    Json
  paymentIntent      String?
  notes              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  cartId             String?
  chargeId           String?
  guestEmail         String?
  fulfillmentStatus  FulfillmentStatus @default(PENDING)
  printifyOrderId    String?
  trackingNumber     String?
  trackingUrl        String?
  appliedPromotionId String?
  discountAmount     Decimal?          @db.Decimal(10, 2)
  address            Address?          @relation(fields: [addressId], references: [id])
  appliedPromotion   Promotion?        @relation("OrderPromotions", fields: [appliedPromotionId], references: [id])
  user               User?             @relation(fields: [userId], references: [id])
  items              OrderItem[]
  payment            Payment?
  promotionUsage     PromotionUsage[]

  @@index([userId])
  @@index([guestEmail])
}

model OrderItem {
  id          String           @id @default(cuid())
  orderId     String
  productId   String
  inventoryId String
  quantity    Int
  price       Decimal          @db.Decimal(10, 2)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  image       String?
  name        String
  attributes  Json?
  inventory   ProductInventory @relation(fields: [inventoryId], references: [id])
  order       Order            @relation(fields: [orderId], references: [id])
  product     Product          @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([inventoryId])
}

model Cart {
  id         String          @id @default(cuid())
  userId     String?         @unique
  sessionId  String?         @unique
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  processed  Boolean         @default(false)
  user       User?           @relation(fields: [userId], references: [id])
  items      CartItem[]
  promotions CartPromotion[]

  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id                 String           @id @default(cuid())
  cartId             String
  productId          String
  inventoryId        String
  quantity           Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  selectedAttributes Json?
  cart               Cart             @relation(fields: [cartId], references: [id], onDelete: Cascade)
  inventory          ProductInventory @relation(fields: [inventoryId], references: [id])
  product            Product          @relation(fields: [productId], references: [id])

  @@unique([cartId, inventoryId])
  @@index([cartId])
  @@index([productId])
  @@index([inventoryId])
}

model CartPromotion {
  id           String    @id @default(cuid())
  cartId       String
  promotionId  String
  couponCode   String
  discount     Decimal   @db.Decimal(10, 2)
  discountType String
  appliedItems String[]  @default([])
  freeItem     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cart         Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  promotion    Promotion @relation(fields: [promotionId], references: [id])

  @@unique([cartId, promotionId])
  @@index([cartId])
  @@index([promotionId])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int      @default(5)
  title      String?
  content    String
  userId     String
  productId  String
  isVerified Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
}

model Address {
  id            String   @id @default(cuid())
  street        String
  city          String
  state         String
  postalCode    String?
  country       String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isUserManaged Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id])
  orders        Order[]

  @@index([userId])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  provider      String
  paymentId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentResult Json?         @db.Json
  attemptCount  Int           @default(0)
  lastUpdated   DateTime      @default(now())
  order         Order         @relation(fields: [orderId], references: [id])
}

model Wishlist {
  id           String         @id @default(cuid())
  userId       String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id])
  WishlistItem WishlistItem[]

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductType {
  id          String                 @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  categories  Category[]
  products    Product[]
  attributes  ProductTypeAttribute[]
}

model ProductTypeAttribute {
  id              String                    @id @default(cuid())
  name            String
  displayName     String
  description     String?
  type            AttributeType
  isRequired      Boolean                   @default(false)
  options         Json?
  isForProduct    Boolean                   @default(true)
  productTypeId   String
  inventoryValues InventoryAttributeValue[]
  productValues   ProductAttributeValue[]
  productType     ProductType               @relation(fields: [productTypeId], references: [id])
}

model ProductAttributeValue {
  id          String               @id @default(cuid())
  productId   String
  attributeId String
  value       String
  attribute   ProductTypeAttribute @relation(fields: [attributeId], references: [id])
  product     Product              @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, attributeId])
}

model InventoryAttributeValue {
  id          String               @id @default(cuid())
  inventoryId String
  attributeId String
  value       String
  attribute   ProductTypeAttribute @relation(fields: [attributeId], references: [id])
  inventory   ProductInventory     @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([inventoryId, attributeId])
}

model WishlistItem {
  id         String   @id
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())
  Product    Product  @relation(fields: [productId], references: [id])
  Wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([productId])
  @@index([wishlistId])
}

model ProductWishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation("ProductWishlist", fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation("ProductWishlist", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model PrintifyConfig {
  id            String   @id @default(cuid())
  shopId        Int      @unique
  accessToken   String
  webhookSecret String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Design {
  id             String          @id @default(cuid())
  name           String
  description    String?
  imageUrl       String
  thumbnailUrl   String?
  width          Int
  height         Int
  fileSize       Int?
  fileType       String?
  tags           String[]        @default([])
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String?
  user           User?           @relation("UserDesigns", fields: [userId], references: [id])
  productDesigns ProductDesign[]

  @@index([userId])
  @@index([isActive])
}

model ProductDesign {
  id        String   @id @default(cuid())
  productId String
  designId  String
  position  String
  x         Float    @default(50)
  y         Float    @default(50)
  scale     Float    @default(100)
  angle     Float    @default(0)
  layer     Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  design    Design   @relation(fields: [designId], references: [id], onDelete: Cascade)
  product   Product  @relation("ProductDesigns", fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, designId, position])
  @@index([productId])
  @@index([designId])
}

model Promotion {
  id                     String           @id @default(cuid())
  name                   String
  description            String?
  promotionType          PromotionType
  value                  Decimal
  minimumOrderValue      Decimal?
  startDate              DateTime
  endDate                DateTime
  isActive               Boolean          @default(true)
  freeItemId             String?
  couponCode             String?          @unique
  usageLimit             Int?
  usageCount             Int              @default(0)
  applyToAllItems        Boolean          @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  isOneTimeUse           Boolean          @default(false)
  requiresAuthentication Boolean          @default(false)
  perUserLimit           Int?
  cartPromotions         CartPromotion[]
  appliedOrders          Order[]          @relation("OrderPromotions")
  freeItem               Product?         @relation("FreeItemPromotion", fields: [freeItemId], references: [id])
  usageRecords           PromotionUsage[]
  categories             Category[]       @relation("CategoryPromotions")
  products               Product[]        @relation("ProductPromotions")
}

model PromotionUsage {
  id               String    @id @default(cuid())
  promotionId      String
  userId           String
  orderId          String?
  discountAmount   Decimal   @db.Decimal(10, 2)
  originalAmount   Decimal   @db.Decimal(10, 2)
  finalAmount      Decimal   @db.Decimal(10, 2)
  couponCode       String?
  customerSegment  String?
  deviceType       String?
  referralSource   String?
  isFirstTimeUse   Boolean   @default(false)
  timeToConversion Int?
  cartItemCount    Int?
  createdAt        DateTime  @default(now())
  order            Order?    @relation(fields: [orderId], references: [id])
  promotion        Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id])

  @@index([promotionId])
  @@index([userId])
  @@index([orderId])
  @@index([createdAt])
}

enum AttributeType {
  STRING
  NUMBER
  BOOLEAN
  DATE
  ARRAY
  COLOR
  DIMENSION
  WEIGHT
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum FulfillmentType {
  LOCAL_INVENTORY
  PRINTIFY_POD
  HYBRID
}

enum FulfillmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  FAILED
}

enum PromotionType {
  PERCENTAGE_DISCOUNT
  FIXED_AMOUNT_DISCOUNT
  FREE_ITEM
  BUY_ONE_GET_ONE
}
