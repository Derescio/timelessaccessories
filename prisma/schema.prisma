generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Account       Account[]
  addresses     Address[]
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  Session       Session[]
  wishlist      Wishlist?
}

model Product {
  id            String             @id @default(cuid())
  name          String
  description   String
  slug          String             @unique
  categoryId    String
  isActive      Boolean            @default(true)
  metadata      Json?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  category      Category           @relation(fields: [categoryId], references: [id])
  inventories   ProductInventory[]
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@index([categoryId])
  @@index([isActive])
}

model ProductInventory {
  id                 String      @id @default(cuid())
  productId          String
  sku                String      @unique
  costPrice          Decimal     @db.Decimal(10, 2)
  retailPrice        Decimal     @db.Decimal(10, 2)
  compareAtPrice     Decimal?    @db.Decimal(10, 2)
  discountPercentage Int?
  hasDiscount        Boolean     @default(false)
  quantity           Int         @default(0)
  lowStock           Int         @default(5)
  images             String[]
  attributes         Json?
  isDefault          Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  cartItems          CartItem[]
  orderItems         OrderItem[]
  product            Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  imageUrl    String?    @default("/placeholder.svg")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parentId    String?
  slug        String     @unique
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  products    Product[]

  @@index([parentId])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  shipping        Decimal     @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  addressId       String?
  billingAddress  Json?
  shippingAddress Json
  paymentIntent   String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  cartId          String?
  address         Address?    @relation(fields: [addressId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  payment         Payment?

  @@index([userId])
}

model OrderItem {
  id          String           @id @default(cuid())
  orderId     String
  productId   String
  inventoryId String
  quantity    Int
  price       Decimal          @db.Decimal(10, 2)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  image       String?
  name        String
  inventory   ProductInventory @relation(fields: [inventoryId], references: [id])
  order       Order            @relation(fields: [orderId], references: [id])
  product     Product          @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([inventoryId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  sessionId String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  processed Boolean    @default(false)
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id          String           @id @default(cuid())
  cartId      String
  productId   String
  inventoryId String
  quantity    Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  cart        Cart             @relation(fields: [cartId], references: [id], onDelete: Cascade)
  inventory   ProductInventory @relation(fields: [inventoryId], references: [id])
  product     Product          @relation(fields: [productId], references: [id])

  @@unique([cartId, inventoryId])
  @@index([cartId])
  @@index([productId])
  @@index([inventoryId])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int      @default(5)
  title      String?
  content    String
  userId     String
  productId  String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
}

model Address {
  id            String   @id @default(cuid())
  street        String
  city          String
  state         String
  postalCode    String?
  country       String
  userId        String
  isUserManaged Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  orders        Order[]

  @@index([userId])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  provider      String
  paymentId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentResult Json?         @db.Json
  attemptCount  Int           @default(0)
  lastUpdated   DateTime      @default(now())
  order         Order         @relation(fields: [orderId], references: [id])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]

  @@index([userId])
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([wishlistId])
  @@index([productId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
