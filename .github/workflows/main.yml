name: CI/CD Pipeline

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

env:
  NODE_VERSION: "20.x"
  NEON_DB_NAME: "dwshop"
  NEON_PROJECT_ID: "dark-scene-a59y6uw3"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup Environment Variables
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/development ]]; then
            # Create a new branch from main for staging
            BRANCH_ID="staging-$(date +%Y%m%d-%H%M%S)"
            echo "Creating staging branch: $BRANCH_ID"
            echo "NODE_ENV=staging" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}?branch=$BRANCH_ID" >> $GITHUB_ENV
          else
            # For PR testing, create a temporary branch
            BRANCH_ID="pr-${{ github.event.pull_request.number }}-$(date +%Y%m%d-%H%M%S)"
            echo "Creating PR test branch: $BRANCH_ID"
            echo "NODE_ENV=development" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}?branch=$BRANCH_ID" >> $GITHUB_ENV
          fi

      - name: Check Migrations Status
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Checking pending migrations..."
          npx prisma migrate status

      - name: Run Prisma Migrations
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "Running production migrations..."
            npx prisma migrate deploy
          else
            echo "Running migrations on branch..."
            npx prisma migrate deploy
          fi

      - name: Type Check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Run Tests
        run: npm test

  deploy-staging:
    needs: validate
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel (Staging)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          npm i -g vercel
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    needs: validate
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Backup Check
        run: |
          echo "Creating production snapshot before deployment..."
          SNAPSHOT_ID="deploy-$(date +%Y%m%d-%H%M%S)"
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}?branch=$SNAPSHOT_ID" >> $GITHUB_ENV

      - name: Deploy to Vercel (Production)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          npm i -g vercel
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
